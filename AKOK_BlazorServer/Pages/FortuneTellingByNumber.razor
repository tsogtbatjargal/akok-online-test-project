@page "/"
@page "/fortunetellingbynumber"

<TitleComponent TitleName="Hello, Let's Find Your Lucky Numbers in Numerlogy"></TitleComponent>

<EditForm Model="@person" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-value="person.FirstName" ValueExpression="@(() => person.FirstName)" class="form-control" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" @bind-value="person.LastName" ValueExpression="@(() => person.LastName)" class="form-control" />

    </div>
    <div class="form-group">
        <label for="dateOfBirth">Date of Birth:</label>
        <InputDate TValue="DateTime" id="dateOfBirth" @bind-value="person.DateOfBirth" ValueExpression="@(() => person.DateOfBirth)" class="form-control" />
    </div>

    <div class="d-flex justify-content-center mt-4">
        <button type="submit" class="btn btn-primary mx-3">Next</button>
    </div>
</EditForm>


@code {
    private Person person = new Person();
    public FortuneNumber fortuneNumber = new FortuneNumber();

    protected override void OnInitialized()
    {
        person.DateOfBirth = DateTime.Today.AddMonths(-120);
    }

    private void HandleValidSubmit()
    {
        //Name related Number
        var name = $"{person.FirstName} {person.MiddleName} {person.LastName}".ToUpper();
        var nameSum = name.Sum(c => char.IsLetter(c) ? (c - 'A') % 9 + 1 : 0);
        var result = 0;
        if (nameSum == 11 || nameSum == 22)
        {
            fortuneNumber.ResultNameNumberHybrid = nameSum;
        }
        while (nameSum > 0)
        {
            result += nameSum % 10;
            nameSum /= 10;
        }
        if (result > 9)
        {
            nameSum = result;
            result = nameSum % 10;
            nameSum /= 10;
            result += nameSum;
        }

        fortuneNumber.ResultNameNumber = result;

        //DOB related Number
        var dayOfBirth = person.DateOfBirth.Day;
        var monthOfBirth = person.DateOfBirth.Month;
        var yearOfBirth = person.DateOfBirth.Year;

        var dynamicsOfLifeNumber = dayOfBirth + monthOfBirth + yearOfBirth;

        if (dynamicsOfLifeNumber != 11 && dynamicsOfLifeNumber != 22)
        {
            while (dynamicsOfLifeNumber > 9)
            {
                dynamicsOfLifeNumber = dynamicsOfLifeNumber.ToString().Sum(c => c - '0');
                if (dynamicsOfLifeNumber == 11 || dynamicsOfLifeNumber == 22)
                {
                    fortuneNumber.ResultNameNumberHybrid = dynamicsOfLifeNumber;
                }
            }
        }

        fortuneNumber.DynamicsOfLifeNumber = dynamicsOfLifeNumber;

        ResultTextService.SetValueForPerson(person);
        ResultTextService.SetValueForFeeConfirmation(fortuneNumber);
        NavigationManager.NavigateTo("/feeconfirmbycode");

    }
}
