@page "/result"
@*@page "/result/{FortuneId:int}"*@
@inject IResultTextService resultTextService

@inject IJSRuntime JSRuntime

<TitleComponent TitleName="Here is your numbers!"></TitleComponent>

<h4>Your Name Number is: @nameNumber</h4>
@if (EditorEnabled)
{
    <div id="toolbar">        
    </div>
}
<div @ref="@divEditorElement" />


@if (nameNumber != dynamicsOfLifeNumber)
{
    <h4>Your Dynamics Of Life Number  is: @dynamicsOfLifeNumber</h4>        
    <div @ref="@divEditorElement2" />    
}

@if (hybridNumber != null && hybridNumber != 0)
{
    <h4>Your Hybrid Of Life Number  is: @hybridNumber</h4>     
}
<div @ref="@divEditorElement3" />

@code {
    private string strSavedContent = "";
    private ElementReference divEditorElement;
    private ElementReference divEditorElement2;
    private ElementReference divEditorElement3;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);  
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement2);
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement3);
        }

        if (EditorEnabled == true)  //editor should be enabled first
        {
            // Order matters of following numbers. It should be disabled in the end
            if (dynamicsOfLifeNumberBodyText != "" | dynamicsOfLifeNumberBodyText != null)
            {
                await LoadContent(dynamicsOfLifeNumberBodyText, divEditorElement2);
                await DisableQuillEditor(divEditorElement2);
            }

            if (hybridNumberBodyText != null)
            {
                await LoadContent(hybridNumberBodyText, divEditorElement3);
                await DisableQuillEditor(divEditorElement3);
            }
            if (nameNumberBodyText != "" | nameNumberBodyText != null)
            {
                await LoadContent(nameNumberBodyText, divEditorElement);
                await DisableQuillEditor(divEditorElement);
                EditorEnabled = false;
            }
            
        }       

    }
    
   
    async Task LoadContent(string strSavedContent, ElementReference editorElement )
    {
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.loadQuillContent", editorElement, strSavedContent);
    }

    async Task DisableQuillEditor(ElementReference editorElement)
    {
        //EditorEnabled = false;
        await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.disableQuillEditor", editorElement);
    }

}

@code {
    private int nameNumber;
    private int? hybridNumber;
    private int dynamicsOfLifeNumber;

    private bool showHybridNumber = true;

    private string nameNumberBodyText;
    private string hybridNumberBodyText;
    private string dynamicsOfLifeNumberBodyText;

    Models.ResultText resultText = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var fortuneNumber = ResultTextService.FortuneNumberResult;

        if (fortuneNumber != null)
        {
            nameNumber = fortuneNumber.ResultNameNumber;
            dynamicsOfLifeNumber = fortuneNumber.DynamicsOfLifeNumber;

            var result = resultTextService.FindByNumber(nameNumber);
            if (result != null)
            {
                nameNumberBodyText = result.LongText;

            }

            result = resultTextService.FindByNumber(dynamicsOfLifeNumber);
            if (result != null)
            {
                dynamicsOfLifeNumberBodyText = result.LongText;                
            }

            if (fortuneNumber.ResultNameNumberHybrid.HasValue)
            {
                nameNumberBodyText = resultTextService.FindByNumber(hybridNumber).LongText;
            }
        }
        

    }
}
